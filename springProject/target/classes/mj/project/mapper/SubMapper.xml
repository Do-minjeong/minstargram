<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mj.project.mapper.SubMapper">
	<!-- 좋아요 기능 -->
	<insert id="likeOn">
		INSERT INTO post_likes(p_likes_no, post_no, member_no)
		VALUES (p_likes_no_seq.NEXTVAL, #{post_no}, #{member_no})
	</insert>

	<delete id="likeOff">
		DELETE FROM post_likes 
		WHERE post_no = #{post_no} AND member_no = #{member_no}
	</delete>

	<select id="likeCount" resultType="Integer">
		SELECT COUNT(*)
		FROM post_likes
		WHERE post_no = #{post_no}
	</select>
	
	<!-- 북마크 기능 -->
	<insert id="bookmarkOn">
		INSERT INTO post_bookmarks(p_bookmark_no, member_no, post_no)
		VALUES (p_bookmark_no_seq.NEXTVAL, #{member_no}, #{post_no})
	</insert>

	<delete id="bookmarkOff">
		DELETE FROM post_bookmarks
		WHERE post_no = #{post_no} AND member_no = #{member_no}
	</delete>

	<update id="replyInsert" >
		<selectKey keyProperty="reply_no" resultType="int" order="BEFORE">
			SELECT reply_no_seq.NEXTVAL	FROM dual
		</selectKey>
		{CALL
		DECLARE
		BEGIN
		
		INSERT INTO replys(reply_no, post_no, member_no, r_contents)
		VALUES (#{reply_no}, #{post_no}, #{member_no}, #{r_contents});
		
		<foreach collection="tagList" item="t_list">
			INSERT INTO post_tags(p_tag_no, post_no, tag_no)
			VALUES(p_tag_no_seq.NEXTVAL, #{post_no}, #{t_list.tag_no});
		</foreach>
		END
		}
	</update>
	
	<insert id="rpLikeOn">
		INSERT INTO reply_likes(r_likes_no, reply_no, member_no)
		VALUES (r_likes_no_seq.NEXTVAL, #{reply_no}, #{member_no} )
	</insert>
	
	<delete id="rpLikeOff">
		DELETE FROM reply_likes
		WHERE reply_no = #{reply_no} AND member_no = #{member_no}
	</delete>
	
	<insert id="followOn">
		INSERT INTO follow_relationship(follow_no, member_no, tg_member_no)
		VALUES (follow_no_seq.NEXTVAL, #{member_no}, #{tg_no})
	</insert>
	<delete id="followOff" >
		DELETE FROM follow_relationship
		WHERE member_no = #{member_no} AND tg_member_no = #{tg_no}
	</delete>
	
	<resultMap type="mj.project.domain.InfoVO" id="infoMap">
		<result property="member_no" column="member_no" />
		<result property="userid" column="userid" />
		<result property="name" column="name" />
		<result property="profile_photo" column="profile_photo" />
		<result property="relationship" column="relationship" />
	</resultMap>
	
	<select id="likesInfo" resultMap="infoMap">
		SELECT like_member_no as member_no
		      , CASE
		        WHEN member_no IS NULL AND tg_member_no IS NULL -- 관계없음
		        THEN 0
		        WHEN member_no IS NOT NULL AND tg_member_no IS NULL  -- 나를 팔로우
		        THEN 1
		        WHEN member_no IS NULL AND tg_member_no IS NOT NULL  -- 내가 팔로우
		        THEN 2
		        WHEN member_no IS NOT NULL AND tg_member_no IS NOT NULL  -- 맞팔로우
		        THEN 3
		      END relationship
		      , userid
		      , profile_photo
		      , name
		FROM (SELECT post_no, m.member_no as like_member_no, userid, name, profile_photo
		      FROM post_likes pl JOIN members m ON(pl.member_no = m.member_no)
		      WHERE post_no = #{post_no}
		      ORDER BY p_likes_no DESC ) a 
		LEFT JOIN 
		      (SELECT DISTINCT member_no
		       FROM follow_relationship fr
		       WHERE member_no = #{member_no} OR tg_member_no = #{member_no} ) b
		ON ( a.like_member_no = b.member_no )
		LEFT JOIN
		      (SELECT DISTINCT tg_member_no
		       FROM follow_relationship fr
		       WHERE member_no = #{member_no} OR tg_member_no = #{member_no} ) c
		ON ( a.like_member_no = c.tg_member_no )
	</select>
	
	<select id="followersInfo" resultMap="infoMap">
		
	</select>
	
	
	
  </mapper>