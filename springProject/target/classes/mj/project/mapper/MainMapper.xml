<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mj.project.mapper.MainMapper">
  
  <update id="postWrite">
  	<selectKey keyProperty="post_no" resultType="int" order="BEFORE">
  		SELECT post_no_seq.NEXTVAL FROM dual
  	</selectKey>
  	{CALL
  	 DECLARE
  	 BEGIN
  	 	
  	 	INSERT INTO posts(post_no, contents, member_no)
  	 	VALUES ( #{post_no}, #{contents}, #{member_no});
  	 	
  	 	<foreach collection="attachList" item="a_list">
  	 	INSERT INTO photos(photo_no, file_name, file_url, file_size, post_no)
  	 	VALUES ( photo_no_seq.NEXTVAL, #{a_list.file_name}, #{a_list.file_url}, #{a_list.file_size}, #{post_no});	 	
  	 	</foreach>
  	 	
  	 	<foreach collection="tagList" item="t_list">
  	 		INSERT INTO tags(tag_no, tag_name, post_no)
  	 		VALUES (tag_no_seq.NEXTVAL, #{t_list.tag_name}, #{post_no});
  	 	</foreach>
  	 	
  	 END }
  </update>
  
  <resultMap type="mj.project.domain.PostVO" id="postMap">
  	<id property="post_no" column="post_no" />
  	<result property="post_no" column="post_no" />
  	<result property="contents" column="contents" />
  	<result property="member_no" column="member_no" />
  	<result property="reg_date" column="reg_date" />
  	<result property="userid" column="userid" />
  	<result property="profile_photo" column="profile_photo" />
  	<result property="like_btn" column="like_btn" />
  	<result property="like_cnt" column="like_cnt" />
  	<result property="bookmark_btn" column="bookmark_btn" />
  	<result property="reply_cnt" column="reply_cnt" />
  	<collection property="attachList" resultMap="attachMap"></collection>
  	<collection property="replyList" resultMap="replyMap"></collection>
  </resultMap>
  <resultMap type="mj.project.domain.AttachFileVO" id="attachMap">
  	<result property="file_name" column="file_name" />
  	<result property="file_url" column="file_url" />
  	<result property="total_url" column="total_url" />
  </resultMap>
  <resultMap type="mj.project.domain.ReplyVO" id="replyMap">
  	<result property="reply_no" column="reply_no" />
  	<result property="userid" column="r_userid"/>
  	<result property="r_contents" column="r_contents" />
  </resultMap>
  
  <select id="readPosts" resultMap="postMap">
  	SELECT p.post_no, p.contents,
       CASE 
        WHEN (sysdate - p.reg_date) BETWEEN 0 AND 1/24
        THEN trunc((sysdate - p.reg_date)*60*24,0)||'분 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1/24 AND 1
        THEN TRUNC((sysdate - p.reg_date)*24) || '시간 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1 AND 6
        THEN TRUNC((sysdate - p.reg_date)) || '일 전'
        WHEN (sysdate - p.reg_date) BETWEEN 6 AND 7
        THEN '1주 전'
        ELSE p.reg_date || ''
       END reg_date ,
       m.userid, profile_photo, photo_no, file_name, file_url, 
       'http://localhost' || REPLACE(SUBSTR(file_url, INSTR(file_url,'\resources')),'\','/') || '/' || file_name as total_url,
       CASE
       	WHEN mpl.post_no IS NULL    THEN 'false'
      	ELSE 'true'
       END like_btn,
       NVL(like_cnt,0) as like_cnt,
       CASE
      	WHEN pb.post_no IS NULL  THEN 'false'
        ELSE 'true'
       END bookmark_btn,
       r.reply_no,
       r.userid as r_userid,
       r_contents,
       reply_cnt
	FROM posts p JOIN photos ph ON (p.post_no = ph.post_no)
             	 JOIN members m ON (p.member_no = m.member_no)
              	 LEFT JOIN (SELECT * FROM post_likes WHERE member_no = #{member_no}) mpl ON(mpl.post_no = p.post_no)
              	 LEFT JOIN (SELECT post_no, COUNT(*)OVER(PARTITION BY POST_NO) as like_cnt FROM post_likes) pl ON(p.post_no = pl.post_no)
              	 LEFT JOIN (SELECT * FROM post_bookmarks WHERE member_no = 4) pb ON(pb.post_no = p.post_no)
              	 LEFT JOIN (
                    SELECT *
                    FROM ( SELECT *
                           FROM (
                            SELECT post_no, reply_no, userid, r_contents, COUNT(*)OVER(PARTITION BY post_no) as reply_cnt 
                            	   , RANK()OVER(PARTITION BY post_no ORDER BY rp.reg_date DESC) as rn, rp.reg_date
                        	FROM replys rp JOIN members ms ON(rp.member_no = ms.member_no)
                           )
                        WHERE rn <![CDATA[<]]> 3
                        )
                    ORDER BY post_no DESC
              	 ) r ON(r.post_no = p.post_no )
	ORDER BY post_no DESC, rn desc
  </select>

  </mapper>