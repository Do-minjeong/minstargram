<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mj.project.mapper.MainMapper">
  
  <update id="postWrite">
  	<selectKey keyProperty="post_no" resultType="int" order="BEFORE">
  		SELECT post_no_seq.NEXTVAL FROM dual
  	</selectKey>
  	{CALL
  	 DECLARE
  	 BEGIN
  	 	
  	 	INSERT INTO posts(post_no, contents, member_no)
  	 	VALUES ( #{post_no}, #{contents}, #{member_no});
  	 	
  	 	<foreach collection="attachList" item="a_list">
  	 	INSERT INTO photos(photo_no, file_name, file_url, file_size, post_no)
  	 	VALUES ( photo_no_seq.NEXTVAL, #{a_list.file_name}, #{a_list.file_url}, #{a_list.file_size}, #{post_no});	 	
  	 	</foreach>
  	 	
  	 	<foreach collection="tagList" item="t_list">
  	 		INSERT INTO tags(tag_no, tag_name, post_no)
  	 		VALUES (tag_no_seq.NEXTVAL, #{t_list.tag_name}, #{post_no});
  	 	</foreach>
  	 	
  	 END }
  </update>
  <!-- property: beans 필드명 ,  column: resultset 컬럼명 -->
  <resultMap type="mj.project.domain.PostVO" id="postMap">
  	<id property="post_no" column="post_no" />
  	<result property="post_no" column="post_no" />
  	<result property="contents" column="contents" />
  	<result property="member_no" column="member_no" />
  	<result property="reg_date" column="reg_date" />
  	<result property="userid" column="p_write_id" />
  	<result property="profile_photo" column="profile_photo" />
  	<result property="like_btn" column="like_btn" />
  	<result property="like_cnt" column="like_cnt" />
  	<result property="bookmark_btn" column="bookmark_btn" />
  	<result property="reply_cnt" column="reply_cnt" />
  	<result property="multi_tf" column="multi_tf" />
  	<result property="o_total_url" column="o_total_url" />
  	<collection property="attachList" resultMap="attachMap"></collection>
  	<collection property="replyList" resultMap="replyMap"></collection>
  </resultMap>
  <resultMap type="mj.project.domain.AttachFileVO" id="attachMap">
  	<result property="file_name" column="file_name" />
  	<result property="file_url" column="file_url" />
  	<result property="total_url" column="total_url" />
  </resultMap>
  <resultMap type="mj.project.domain.ReplyVO" id="replyMap">
  	<result property="reply_no" column="reply_no" />
  	<result property="userid" column="r_write_id"/>
  	<result property="r_contents" column="r_contents" />
  	<result property="r_like_btn" column="r_like_btn" />
  	<result property="r_like_cnt" column="r_like_cnt" />
  </resultMap>
  
  <select id="readPosts" resultMap="postMap">
  	SELECT p.post_no, p.contents,
       CASE 
        WHEN (sysdate - p.reg_date) BETWEEN 0 AND 1/24
        THEN trunc((sysdate - p.reg_date)*60*24,0)||'분 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1/24 AND 1
        THEN TRUNC((sysdate - p.reg_date)*24) || '시간 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1 AND 6
        THEN TRUNC((sysdate - p.reg_date)) || '일 전'
        WHEN (sysdate - p.reg_date) BETWEEN 6 AND 7
        THEN '1주 전'
        ELSE p.reg_date || ''
       END reg_date
       , m.userid as p_write_id, m.member_no, profile_photo, photo_no, file_name, file_url
       , 'http://localhost' || REPLACE(SUBSTR(file_url, INSTR(file_url,'\resources')),'\','/') || '/' || file_name as total_url
       , CASE
          WHEN mpl.post_no IS NULL    THEN 'false'
      	  ELSE 'true'
         END like_btn
       , NVL(like_cnt,0) as like_cnt
       , CASE
      	  WHEN pb.post_no IS NULL  THEN 'false'
          ELSE 'true'
         END bookmark_btn
       , r.reply_no
       , r_write_id
       , r.r_contents
       , NVL(reply_cnt,0) as reply_cnt
       , r_like_id
       , r_like_no
       , r_like_btn
       , r_like_cnt
	FROM posts p JOIN photos ph ON (p.post_no = ph.post_no)
             	 JOIN members m ON (p.member_no = m.member_no)
              	 LEFT JOIN (SELECT * FROM post_likes WHERE member_no = #{member_no}) mpl ON(mpl.post_no = p.post_no)
              	 LEFT JOIN (SELECT post_no, COUNT(*)OVER(PARTITION BY POST_NO) as like_cnt FROM post_likes) pl ON(p.post_no = pl.post_no)
              	 LEFT JOIN (SELECT * FROM post_bookmarks WHERE member_no = #{member_no}) pb ON(pb.post_no = p.post_no)
              	 LEFT JOIN (
                    SELECT *
                    FROM ( SELECT *
                           FROM (
                            SELECT post_no, r.reply_no, r_contents, r_m.userid as r_write_id
                                   , rl.userid as r_like_id, rl.member_no as r_like_no
                                   ,case
                                       when i_r.r_likes_no is null
                                       then 'false'
                                       else 'true'
                                       end r_like_btn
                                   , count(rl.r_likes_no)over(partition by rl.reply_no) as r_like_cnt, reply_cnt
                        	FROM (SELECT *
                                  FROM (
                                    select r.*, ROW_NUMBER()OVER(PARTITION BY post_no ORDER BY r.reply_no DESC) as rn, COUNT(r.reply_no)OVER(PARTITION BY post_no) as reply_cnt
                                    from replys r
                                     )
                                  WHERE rn <![CDATA[<]]> 3
                                  ORDER BY post_no)r 
                                          JOIN members r_m ON(r.member_no = r_m.member_no)
                                          LEFT JOIN (SELECT r_likes_no, rl_m.member_no, userid, reply_no FROM reply_likes rl JOIN members rl_m on(rl.member_no = rl_m.member_no)) rl ON(r.reply_no = rl.reply_no)
                                          LEFT JOIN (SELECT * FROM reply_likes WHERE member_no = #{member_no}) i_r ON(r.reply_no = i_r.reply_no)
                           )
                        )
              	 ) r ON(r.post_no = p.post_no )
    ORDER BY post_no DESC
  </select>
  
  <resultMap type="mj.project.domain.ProfileVO" id="profileMap">
  	<result property="member_no" column="member_no"/>
  	<result property="userid" column="userid" />
  	<result property="name" column="name" />
  	<result property="introduce" column="introduce" />
  	<result property="post_cnt" column="post_cnt"/>
  	<result property="profile_photo" column="profile_photo"/>
  	<collection property="post_List" resultMap="postMap"></collection>
  </resultMap>
  
  
  <select id="readProfile" resultMap="profileMap">
  SELECT p.*, m.introduce, COUNT(*)OVER() as post_cnt, m.userid, m.name, m.profile_photo
  FROM (
    SELECT *
    FROM ( 
    		SELECT ph.post_no, member_no
             , CASE
                WHEN COUNT(file_name)OVER(PARTITION BY ph.post_no)>1 
                THEN 'true'
                ELSE 'false'
               END multi_tf
             , RANK()OVER(PARTITION BY ph.post_no ORDER BY photo_no) as rn
             , 'http://localhost' || REPLACE(SUBSTR(file_url, INSTR(file_url,'\resources')),'\','/') || '/' || file_name as o_total_url
        	FROM posts p JOIN photos ph ON(p.post_no = ph.post_no)
        )
    WHERE rn = 1
       ) p join (select * from members where member_no = #{member_no} )m on(p.member_no = m.member_no)
    ORDER BY post_no DESC
  </select>
  <resultMap type="mj.project.domain.RelationVO" id="relationMap">
  	<result property="follow_cnt" column="follow_cnt" />
  	<result property="follower_cnt" column="follower_cnt" />
  	<result property="relationship" column="relationship" />
  </resultMap>
  
  <select id="readFollow" resultMap="relationMap">
  	select count(decode(fr.member_no,#{member_no},1)) as follow_cnt, count(decode(tg_member_no, #{member_no},1)) as follower_cnt
    , CASE
           WHEN  COUNT(DECODE(fr.member_no,#{member_no2},1)) = 0 and COUNT(DECODE(tg_member_no,#{member_no2},1)) = 0
           THEN 0
           WHEN COUNT(DECODE(fr.member_no,#{member_no2},1)) = 1 and COUNT(DECODE(tg_member_no,#{member_no2},1)) = 0
           THEN 1
           WHEN COUNT(DECODE(tg_member_no,#{member_no2},1)) = 1 AND COUNT(DECODE(fr.member_no,#{member_no2},1)) = 0
           THEN 2
           WHEN COUNT(DECODE(fr.member_no,#{member_no2},1)) = 1 AND COUNT(DECODE(tg_member_no,#{member_no2},1)) = 1
           THEN 3
           END relationship
   from  follow_relationship fr
   where member_no = #{member_no} or tg_member_no = #{member_no}
  </select>
  
  <select id="getPost" resultMap="postMap">
  	SELECT p.post_no, p.contents,
       CASE 
        WHEN (sysdate - p.reg_date) BETWEEN 0 AND 1/24
        THEN trunc((sysdate - p.reg_date)*60*24,0)||'분 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1/24 AND 1
        THEN TRUNC((sysdate - p.reg_date)*24) || '시간 전'
        WHEN (sysdate - p.reg_date) BETWEEN 1 AND 6
        THEN TRUNC((sysdate - p.reg_date)) || '일 전'
        WHEN (sysdate - p.reg_date) BETWEEN 6 AND 7
        THEN '1주 전'
        ELSE p.reg_date || ''
       END reg_date
       , m.userid as p_write_id, m.member_no, profile_photo, photo_no, file_name, file_url
       , 'http://localhost' || REPLACE(SUBSTR(file_url, INSTR(file_url,'\resources')),'\','/') || '/' || file_name as total_url
       , CASE
          WHEN mpl.post_no IS NULL    THEN 'false'
      	  ELSE 'true'
         END like_btn
       , NVL(like_cnt,0) as like_cnt
       , CASE
      	  WHEN pb.post_no IS NULL  THEN 'false'
          ELSE 'true'
         END bookmark_btn
       , r.reply_no
       , r_write_id
       , r.r_contents
       , NVL(reply_cnt,0) as reply_cnt
       , r_like_id
       , r_like_no
       , r_like_btn
       , r_like_cnt
	FROM posts p JOIN photos ph ON (p.post_no = ph.post_no)
             	 JOIN members m ON (p.member_no = m.member_no)
              	 LEFT JOIN (SELECT * FROM post_likes WHERE member_no = 4) mpl ON(mpl.post_no = p.post_no)
              	 LEFT JOIN (SELECT post_no, COUNT(*)OVER(PARTITION BY POST_NO) as like_cnt FROM post_likes) pl ON(p.post_no = pl.post_no)
              	 LEFT JOIN (SELECT * FROM post_bookmarks WHERE member_no = 4) pb ON(pb.post_no = p.post_no)
              	 LEFT JOIN (
                    SELECT *
                    FROM ( SELECT *
                           FROM (
                            SELECT post_no, r.reply_no, r_contents, r_m.userid as r_write_id
                                   , rl.userid as r_like_id, rl.member_no as r_like_no
                                   ,case
                                       when i_r.r_likes_no is null
                                       then 'false'
                                       else 'true'
                                       end r_like_btn
                                   , count(rl.r_likes_no)over(partition by rl.reply_no) as r_like_cnt, reply_cnt
                        	FROM (SELECT *
                                  FROM (
                                    select r.*, ROW_NUMBER()OVER(PARTITION BY post_no ORDER BY r.reply_no DESC) as rn, COUNT(r.reply_no)OVER(PARTITION BY post_no) as reply_cnt
                                    from replys r
                                     )
                                  ORDER BY post_no)r 
                                          JOIN members r_m ON(r.member_no = r_m.member_no)
                                          LEFT JOIN (SELECT r_likes_no, rl_m.member_no, userid, reply_no FROM reply_likes rl JOIN members rl_m on(rl.member_no = rl_m.member_no)) rl ON(r.reply_no = rl.reply_no)
                                          LEFT JOIN (SELECT * FROM reply_likes WHERE member_no = 4) i_r ON(r.reply_no = i_r.reply_no)
                           )
                        )
              	 ) r ON(r.post_no = p.post_no )
    WHERE p.post_no = #{post_no}
  </select>
  

  </mapper>